substitutions:
  temperature_update_time: 5s
  publish_energy_interval: 5s
  publish_wind_interval: 5s
  publish_temperature_interval: 60s
  device_name: "weather"
  appversion: "1.0.0"
  base_topic: "garden/weather"
  base_topic_prod: "garden/weather"

esphome:
  name: ${device_name}
  platform: ESP32
  board: esp32-poe-iso
  includes:
    - eth/eth-address.h
    - deye_uart_read_line_sensor.h

globals:
  - id: current_screen
    type: int
    restore_value: no
    initial_value: '0'

packages:
  mqtt:     !include config/mqtt.yaml
  ethernet: !include config/ethernet.yaml
  i2c:      !include config/i2c.yaml
#  font:     !include ui/fonts/fonts.yaml
#  display:  !include ui/display.yaml

# Enable logging
logger:
  level: INFO
  #level: DEBUG
  #level: VERBOSE

# Enable Home Assistant API
api:
  password: "1234"

ota:
  password: "1234"

web_server:
  port: 80

uart:
  id: uart_bus
#  tx_pin: D0
  rx_pin: GPIO36
  baud_rate: 9600
  data_bits: 8
  parity: NONE
  stop_bits: 1

# Example configuration entry
dallas:
  - pin: GPIO5
    update_interval: ${temperature_update_time}

# Individual sensors
sensor:
  - <<: !include sensors/wind.yaml
  - <<: !include sensors/internal.yaml
  - <<: !include sensors/indoor.yaml
  - <<: !include sensors/outdoor.yaml
  - <<: !include sensors/illuminance.yaml
  - <<: !include sensors/dht.yaml

  - <<: !include mqtt/json/wind.yaml
  - <<: !include mqtt/json/internal.yaml
  - <<: !include mqtt/json/indoor.yaml
  - <<: !include mqtt/json/outdoor.yaml
  - <<: !include mqtt/json/illuminance.yaml
  - <<: !include mqtt/json/dht.yaml
  - <<: !include mqtt/json/energy.yaml

#  - <<: !include ui/screen-toggle.yaml

text_sensor:
  # Version Text Sensor
  # see: https://esphome.io/components/text_sensor/version.html?highlight=platform%20version
  - platform: version
    name: ${device_name} Version
    id: appver
    internal: true
  
  - platform: custom
    id: eth_address
    lambda: |-
      auto eth_address_sensor = new EthAddressTextSensor();
      App.register_component(eth_address_sensor);
      return {eth_address_sensor};

    text_sensors:
      name: "My Custom Text Sensor"

  - platform: custom
    lambda: |-
      auto my_custom_sensor = new DeyeUartReadLineSensor(id(uart_bus));
      App.register_component(my_custom_sensor);
      return {my_custom_sensor};
    text_sensors:
      id: "energy_sensor"
